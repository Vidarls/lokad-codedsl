//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 .\\MessageContracts.g 2013-01-22 09:45:04

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  MessageContracts 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class MessageContractsParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALIAS", "BlockToken", "CLASS", "COMMENT", "CONST", "ComGuidToken", "ComInterfaceGuidToken", "CommandToken", "DisctionaryToken", "ESC_SEQ", "EXPLICIT", "EXTERN", "EntityDefinition", "EventToken", "ExternToken", "FragmentEntry", "FragmentGroup", "FragmentReference", "GUID", "HEX_DIGIT", "ID", "IF", "INT", "INTERFACE", "MemberToken", "Modifier", "ModifierDefinition", "NAMESPACE", "NamespaceToken", "OCTAL_ESC", "STRING", "StringRepresentationToken", "TypeToken", "UNICODE_ESC", "USING", "UsingToken", "WS", "'('", "')'", "','", "'.'", "';'", "'='", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int ALIAS=4;
	public const int BlockToken=5;
	public const int CLASS=6;
	public const int COMMENT=7;
	public const int CONST=8;
	public const int ComGuidToken=9;
	public const int ComInterfaceGuidToken=10;
	public const int CommandToken=11;
	public const int DisctionaryToken=12;
	public const int ESC_SEQ=13;
	public const int EXPLICIT=14;
	public const int EXTERN=15;
	public const int EntityDefinition=16;
	public const int EventToken=17;
	public const int ExternToken=18;
	public const int FragmentEntry=19;
	public const int FragmentGroup=20;
	public const int FragmentReference=21;
	public const int GUID=22;
	public const int HEX_DIGIT=23;
	public const int ID=24;
	public const int IF=25;
	public const int INT=26;
	public const int INTERFACE=27;
	public const int MemberToken=28;
	public const int Modifier=29;
	public const int ModifierDefinition=30;
	public const int NAMESPACE=31;
	public const int NamespaceToken=32;
	public const int OCTAL_ESC=33;
	public const int STRING=34;
	public const int StringRepresentationToken=35;
	public const int TypeToken=36;
	public const int UNICODE_ESC=37;
	public const int USING=38;
	public const int UsingToken=39;
	public const int WS=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public MessageContractsParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public MessageContractsParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return MessageContractsParser.tokenNames; } }
	public override string GrammarFileName { get { return ".\\MessageContracts.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_program() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_program() {}
	// $ANTLR start "program"
	// .\\MessageContracts.g:33:1: program : ( declaration )+ ;
	[GrammarRule("program")]
	private AstParserRuleReturnScope<object, IToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> declaration1 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(33, 1);
		try
		{
			// .\\MessageContracts.g:34:2: ( ( declaration )+ )
			DebugEnterAlt(1);
			// .\\MessageContracts.g:34:4: ( declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(34, 4);
			// .\\MessageContracts.g:34:4: ( declaration )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, decisionCanBacktrack[1]);
				int LA1_1 = input.LA(1);

				if ((LA1_1==CONST||LA1_1==EXTERN||(LA1_1>=ID && LA1_1<=IF)||LA1_1==INTERFACE||LA1_1==NAMESPACE||LA1_1==USING))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// .\\MessageContracts.g:34:4: declaration
					{
					DebugLocation(34, 4);
					PushFollow(Follow._declaration_in_program125);
					declaration1=declaration();
					PopFollow();

					adaptor.AddChild(root_0, declaration1.Tree);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
	    }
	 	DebugLocation(35, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}
	// $ANTLR start "declaration"
	// .\\MessageContracts.g:37:1: declaration : ( modifier_declaration | frag_declaration | type_declaration | entity_declaration | namespace_declaration | extern_declaration | using_declaration );
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 2);
		TraceIn("declaration", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> modifier_declaration2 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> frag_declaration3 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> type_declaration4 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> entity_declaration5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> namespace_declaration6 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> extern_declaration7 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> using_declaration8 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(37, 1);
		try
		{
			// .\\MessageContracts.g:38:2: ( modifier_declaration | frag_declaration | type_declaration | entity_declaration | namespace_declaration | extern_declaration | using_declaration )
			int alt2=7;
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			switch (input.LA(1))
			{
			case IF:
				{
				alt2 = 1;
				}
				break;
			case CONST:
				{
				alt2 = 2;
				}
				break;
			case ID:
				{
				alt2 = 3;
				}
				break;
			case INTERFACE:
				{
				alt2 = 4;
				}
				break;
			case NAMESPACE:
				{
				alt2 = 5;
				}
				break;
			case EXTERN:
				{
				alt2 = 6;
				}
				break;
			case USING:
				{
				alt2 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\MessageContracts.g:38:4: modifier_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(38, 4);
				PushFollow(Follow._modifier_declaration_in_declaration138);
				modifier_declaration2=modifier_declaration();
				PopFollow();

				adaptor.AddChild(root_0, modifier_declaration2.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\MessageContracts.g:39:4: frag_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(39, 4);
				PushFollow(Follow._frag_declaration_in_declaration143);
				frag_declaration3=frag_declaration();
				PopFollow();

				adaptor.AddChild(root_0, frag_declaration3.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// .\\MessageContracts.g:40:4: type_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(40, 4);
				PushFollow(Follow._type_declaration_in_declaration148);
				type_declaration4=type_declaration();
				PopFollow();

				adaptor.AddChild(root_0, type_declaration4.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// .\\MessageContracts.g:41:4: entity_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(41, 4);
				PushFollow(Follow._entity_declaration_in_declaration153);
				entity_declaration5=entity_declaration();
				PopFollow();

				adaptor.AddChild(root_0, entity_declaration5.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// .\\MessageContracts.g:42:4: namespace_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(42, 4);
				PushFollow(Follow._namespace_declaration_in_declaration158);
				namespace_declaration6=namespace_declaration();
				PopFollow();

				adaptor.AddChild(root_0, namespace_declaration6.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// .\\MessageContracts.g:43:4: extern_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(43, 4);
				PushFollow(Follow._extern_declaration_in_declaration164);
				extern_declaration7=extern_declaration();
				PopFollow();

				adaptor.AddChild(root_0, extern_declaration7.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// .\\MessageContracts.g:44:4: using_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(44, 4);
				PushFollow(Follow._using_declaration_in_declaration169);
				using_declaration8=using_declaration();
				PopFollow();

				adaptor.AddChild(root_0, using_declaration8.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 2);
			LeaveRule("declaration", 2);
			LeaveRule_declaration();
	    }
	 	DebugLocation(45, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_namespace_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_namespace_declaration() {}
	// $ANTLR start "namespace_declaration"
	// .\\MessageContracts.g:47:1: namespace_declaration : NAMESPACE ( ID ( '.' ID )* ) ';' -> ^( NamespaceToken ( ID )* ) ;
	[GrammarRule("namespace_declaration")]
	private AstParserRuleReturnScope<object, IToken> namespace_declaration()
	{
		EnterRule_namespace_declaration();
		EnterRule("namespace_declaration", 3);
		TraceIn("namespace_declaration", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NAMESPACE9 = default(IToken);
	    IToken ID10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    IToken ID12 = default(IToken);
	    IToken char_literal13 = default(IToken);

	    object NAMESPACE9_tree = default(object);
	    object ID10_tree = default(object);
	    object char_literal11_tree = default(object);
	    object ID12_tree = default(object);
	    object char_literal13_tree = default(object);
	    RewriteRuleITokenStream stream_NAMESPACE=new RewriteRuleITokenStream(adaptor,"token NAMESPACE");
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
	    RewriteRuleITokenStream stream_45=new RewriteRuleITokenStream(adaptor,"token 45");

		try { DebugEnterRule(GrammarFileName, "namespace_declaration");
		DebugLocation(47, 28);
		try
		{
			// .\\MessageContracts.g:48:5: ( NAMESPACE ( ID ( '.' ID )* ) ';' -> ^( NamespaceToken ( ID )* ) )
			DebugEnterAlt(1);
			// .\\MessageContracts.g:48:7: NAMESPACE ( ID ( '.' ID )* ) ';'
			{
			DebugLocation(48, 7);
			NAMESPACE9=(IToken)Match(input,NAMESPACE,Follow._NAMESPACE_in_namespace_declaration183);  
			stream_NAMESPACE.Add(NAMESPACE9);

			DebugLocation(48, 17);
			// .\\MessageContracts.g:48:17: ( ID ( '.' ID )* )
			DebugEnterAlt(1);
			// .\\MessageContracts.g:48:18: ID ( '.' ID )*
			{
			DebugLocation(48, 18);
			ID10=(IToken)Match(input,ID,Follow._ID_in_namespace_declaration186);  
			stream_ID.Add(ID10);

			DebugLocation(48, 21);
			// .\\MessageContracts.g:48:21: ( '.' ID )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
				int LA3_1 = input.LA(1);

				if ((LA3_1==44))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\MessageContracts.g:48:22: '.' ID
					{
					DebugLocation(48, 22);
					char_literal11=(IToken)Match(input,44,Follow._44_in_namespace_declaration189);  
					stream_44.Add(char_literal11);

					DebugLocation(48, 26);
					ID12=(IToken)Match(input,ID,Follow._ID_in_namespace_declaration191);  
					stream_ID.Add(ID12);


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			DebugLocation(48, 32);
			char_literal13=(IToken)Match(input,45,Follow._45_in_namespace_declaration196);  
			stream_45.Add(char_literal13);



			{
			// AST REWRITE
			// elements: ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 49:5: -> ^( NamespaceToken ( ID )* )
			{
				DebugLocation(49, 8);
				// .\\MessageContracts.g:49:8: ^( NamespaceToken ( ID )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(49, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(NamespaceToken, "NamespaceToken"), root_1);

				DebugLocation(49, 25);
				// .\\MessageContracts.g:49:25: ( ID )*
				while ( stream_ID.HasNext )
				{
					DebugLocation(49, 25);
					adaptor.AddChild(root_1, stream_ID.NextNode());

				}
				stream_ID.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_declaration", 3);
			LeaveRule("namespace_declaration", 3);
			LeaveRule_namespace_declaration();
	    }
	 	DebugLocation(49, 28);
		} finally { DebugExitRule(GrammarFileName, "namespace_declaration"); }
		return retval;

	}
	// $ANTLR end "namespace_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_using_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_using_declaration() {}
	// $ANTLR start "using_declaration"
	// .\\MessageContracts.g:51:1: using_declaration : USING ( ID ( '.' ID )* ) ';' -> ^( UsingToken ( ID )* ) ;
	[GrammarRule("using_declaration")]
	private AstParserRuleReturnScope<object, IToken> using_declaration()
	{
		EnterRule_using_declaration();
		EnterRule("using_declaration", 4);
		TraceIn("using_declaration", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USING14 = default(IToken);
	    IToken ID15 = default(IToken);
	    IToken char_literal16 = default(IToken);
	    IToken ID17 = default(IToken);
	    IToken char_literal18 = default(IToken);

	    object USING14_tree = default(object);
	    object ID15_tree = default(object);
	    object char_literal16_tree = default(object);
	    object ID17_tree = default(object);
	    object char_literal18_tree = default(object);
	    RewriteRuleITokenStream stream_USING=new RewriteRuleITokenStream(adaptor,"token USING");
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
	    RewriteRuleITokenStream stream_45=new RewriteRuleITokenStream(adaptor,"token 45");

		try { DebugEnterRule(GrammarFileName, "using_declaration");
		DebugLocation(51, 24);
		try
		{
			// .\\MessageContracts.g:52:5: ( USING ( ID ( '.' ID )* ) ';' -> ^( UsingToken ( ID )* ) )
			DebugEnterAlt(1);
			// .\\MessageContracts.g:52:7: USING ( ID ( '.' ID )* ) ';'
			{
			DebugLocation(52, 7);
			USING14=(IToken)Match(input,USING,Follow._USING_in_using_declaration226);  
			stream_USING.Add(USING14);

			DebugLocation(52, 13);
			// .\\MessageContracts.g:52:13: ( ID ( '.' ID )* )
			DebugEnterAlt(1);
			// .\\MessageContracts.g:52:14: ID ( '.' ID )*
			{
			DebugLocation(52, 14);
			ID15=(IToken)Match(input,ID,Follow._ID_in_using_declaration229);  
			stream_ID.Add(ID15);

			DebugLocation(52, 17);
			// .\\MessageContracts.g:52:17: ( '.' ID )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
				int LA4_1 = input.LA(1);

				if ((LA4_1==44))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\MessageContracts.g:52:18: '.' ID
					{
					DebugLocation(52, 18);
					char_literal16=(IToken)Match(input,44,Follow._44_in_using_declaration232);  
					stream_44.Add(char_literal16);

					DebugLocation(52, 22);
					ID17=(IToken)Match(input,ID,Follow._ID_in_using_declaration234);  
					stream_ID.Add(ID17);


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			DebugLocation(52, 28);
			char_literal18=(IToken)Match(input,45,Follow._45_in_using_declaration239);  
			stream_45.Add(char_literal18);



			{
			// AST REWRITE
			// elements: ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 53:5: -> ^( UsingToken ( ID )* )
			{
				DebugLocation(53, 8);
				// .\\MessageContracts.g:53:8: ^( UsingToken ( ID )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(53, 10);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(UsingToken, "UsingToken"), root_1);

				DebugLocation(53, 21);
				// .\\MessageContracts.g:53:21: ( ID )*
				while ( stream_ID.HasNext )
				{
					DebugLocation(53, 21);
					adaptor.AddChild(root_1, stream_ID.NextNode());

				}
				stream_ID.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_declaration", 4);
			LeaveRule("using_declaration", 4);
			LeaveRule_using_declaration();
	    }
	 	DebugLocation(53, 24);
		} finally { DebugExitRule(GrammarFileName, "using_declaration"); }
		return retval;

	}
	// $ANTLR end "using_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_frag_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_frag_declaration() {}
	// $ANTLR start "frag_declaration"
	// .\\MessageContracts.g:56:1: frag_declaration : CONST ID '=' ID ID ';' -> ^( FragmentEntry ID ID ID ) ;
	[GrammarRule("frag_declaration")]
	private AstParserRuleReturnScope<object, IToken> frag_declaration()
	{
		EnterRule_frag_declaration();
		EnterRule("frag_declaration", 5);
		TraceIn("frag_declaration", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONST19 = default(IToken);
	    IToken ID20 = default(IToken);
	    IToken char_literal21 = default(IToken);
	    IToken ID22 = default(IToken);
	    IToken ID23 = default(IToken);
	    IToken char_literal24 = default(IToken);

	    object CONST19_tree = default(object);
	    object ID20_tree = default(object);
	    object char_literal21_tree = default(object);
	    object ID22_tree = default(object);
	    object ID23_tree = default(object);
	    object char_literal24_tree = default(object);
	    RewriteRuleITokenStream stream_CONST=new RewriteRuleITokenStream(adaptor,"token CONST");
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_46=new RewriteRuleITokenStream(adaptor,"token 46");
	    RewriteRuleITokenStream stream_45=new RewriteRuleITokenStream(adaptor,"token 45");

		try { DebugEnterRule(GrammarFileName, "frag_declaration");
		DebugLocation(56, 54);
		try
		{
			// .\\MessageContracts.g:57:2: ( CONST ID '=' ID ID ';' -> ^( FragmentEntry ID ID ID ) )
			DebugEnterAlt(1);
			// .\\MessageContracts.g:57:4: CONST ID '=' ID ID ';'
			{
			DebugLocation(57, 4);
			CONST19=(IToken)Match(input,CONST,Follow._CONST_in_frag_declaration263);  
			stream_CONST.Add(CONST19);

			DebugLocation(57, 10);
			ID20=(IToken)Match(input,ID,Follow._ID_in_frag_declaration265);  
			stream_ID.Add(ID20);

			DebugLocation(57, 13);
			char_literal21=(IToken)Match(input,46,Follow._46_in_frag_declaration267);  
			stream_46.Add(char_literal21);

			DebugLocation(57, 17);
			ID22=(IToken)Match(input,ID,Follow._ID_in_frag_declaration269);  
			stream_ID.Add(ID22);

			DebugLocation(57, 20);
			ID23=(IToken)Match(input,ID,Follow._ID_in_frag_declaration271);  
			stream_ID.Add(ID23);

			DebugLocation(57, 23);
			char_literal24=(IToken)Match(input,45,Follow._45_in_frag_declaration273);  
			stream_45.Add(char_literal24);



			{
			// AST REWRITE
			// elements: ID, ID, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 57:27: -> ^( FragmentEntry ID ID ID )
			{
				DebugLocation(57, 30);
				// .\\MessageContracts.g:57:30: ^( FragmentEntry ID ID ID )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(57, 32);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FragmentEntry, "FragmentEntry"), root_1);

				DebugLocation(57, 46);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(57, 49);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(57, 52);
				adaptor.AddChild(root_1, stream_ID.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("frag_declaration", 5);
			LeaveRule("frag_declaration", 5);
			LeaveRule_frag_declaration();
	    }
	 	DebugLocation(57, 54);
		} finally { DebugExitRule(GrammarFileName, "frag_declaration"); }
		return retval;

	}
	// $ANTLR end "frag_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_modifier_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_modifier_declaration() {}
	// $ANTLR start "modifier_declaration"
	// .\\MessageContracts.g:59:1: modifier_declaration : IF Modifier '=' ID ( ',' ID )* ';' -> ^( ModifierDefinition Modifier ( ID )* ) ;
	[GrammarRule("modifier_declaration")]
	private AstParserRuleReturnScope<object, IToken> modifier_declaration()
	{
		EnterRule_modifier_declaration();
		EnterRule("modifier_declaration", 6);
		TraceIn("modifier_declaration", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken IF25 = default(IToken);
	    IToken Modifier26 = default(IToken);
	    IToken char_literal27 = default(IToken);
	    IToken ID28 = default(IToken);
	    IToken char_literal29 = default(IToken);
	    IToken ID30 = default(IToken);
	    IToken char_literal31 = default(IToken);

	    object IF25_tree = default(object);
	    object Modifier26_tree = default(object);
	    object char_literal27_tree = default(object);
	    object ID28_tree = default(object);
	    object char_literal29_tree = default(object);
	    object ID30_tree = default(object);
	    object char_literal31_tree = default(object);
	    RewriteRuleITokenStream stream_IF=new RewriteRuleITokenStream(adaptor,"token IF");
	    RewriteRuleITokenStream stream_Modifier=new RewriteRuleITokenStream(adaptor,"token Modifier");
	    RewriteRuleITokenStream stream_46=new RewriteRuleITokenStream(adaptor,"token 46");
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
	    RewriteRuleITokenStream stream_45=new RewriteRuleITokenStream(adaptor,"token 45");

		try { DebugEnterRule(GrammarFileName, "modifier_declaration");
		DebugLocation(59, 73);
		try
		{
			// .\\MessageContracts.g:60:2: ( IF Modifier '=' ID ( ',' ID )* ';' -> ^( ModifierDefinition Modifier ( ID )* ) )
			DebugEnterAlt(1);
			// .\\MessageContracts.g:60:4: IF Modifier '=' ID ( ',' ID )* ';'
			{
			DebugLocation(60, 4);
			IF25=(IToken)Match(input,IF,Follow._IF_in_modifier_declaration300);  
			stream_IF.Add(IF25);

			DebugLocation(60, 7);
			Modifier26=(IToken)Match(input,Modifier,Follow._Modifier_in_modifier_declaration302);  
			stream_Modifier.Add(Modifier26);

			DebugLocation(60, 16);
			char_literal27=(IToken)Match(input,46,Follow._46_in_modifier_declaration304);  
			stream_46.Add(char_literal27);

			DebugLocation(60, 20);
			ID28=(IToken)Match(input,ID,Follow._ID_in_modifier_declaration306);  
			stream_ID.Add(ID28);

			DebugLocation(60, 23);
			// .\\MessageContracts.g:60:23: ( ',' ID )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, decisionCanBacktrack[5]);
				int LA5_1 = input.LA(1);

				if ((LA5_1==43))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\MessageContracts.g:60:24: ',' ID
					{
					DebugLocation(60, 24);
					char_literal29=(IToken)Match(input,43,Follow._43_in_modifier_declaration309);  
					stream_43.Add(char_literal29);

					DebugLocation(60, 28);
					ID30=(IToken)Match(input,ID,Follow._ID_in_modifier_declaration311);  
					stream_ID.Add(ID30);


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(60, 33);
			char_literal31=(IToken)Match(input,45,Follow._45_in_modifier_declaration315);  
			stream_45.Add(char_literal31);



			{
			// AST REWRITE
			// elements: Modifier, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 60:37: -> ^( ModifierDefinition Modifier ( ID )* )
			{
				DebugLocation(60, 40);
				// .\\MessageContracts.g:60:40: ^( ModifierDefinition Modifier ( ID )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(60, 42);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ModifierDefinition, "ModifierDefinition"), root_1);

				DebugLocation(60, 61);
				adaptor.AddChild(root_1, stream_Modifier.NextNode());
				DebugLocation(60, 70);
				// .\\MessageContracts.g:60:70: ( ID )*
				while ( stream_ID.HasNext )
				{
					DebugLocation(60, 70);
					adaptor.AddChild(root_1, stream_ID.NextNode());

				}
				stream_ID.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifier_declaration", 6);
			LeaveRule("modifier_declaration", 6);
			LeaveRule_modifier_declaration();
	    }
	 	DebugLocation(60, 73);
		} finally { DebugExitRule(GrammarFileName, "modifier_declaration"); }
		return retval;

	}
	// $ANTLR end "modifier_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_entity_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_entity_declaration() {}
	// $ANTLR start "entity_declaration"
	// .\\MessageContracts.g:62:1: entity_declaration : lc= INTERFACE ID block '{' ( declaration )* '}' -> ^( EntityDefinition[$lc,\"Block\"] ID block ( declaration )* ) ;
	[GrammarRule("entity_declaration")]
	private AstParserRuleReturnScope<object, IToken> entity_declaration()
	{
		EnterRule_entity_declaration();
		EnterRule("entity_declaration", 7);
		TraceIn("entity_declaration", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken lc = default(IToken);
	    IToken ID32 = default(IToken);
	    IToken char_literal34 = default(IToken);
	    IToken char_literal36 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> block33 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration35 = default(AstParserRuleReturnScope<object, IToken>);

	    object lc_tree = default(object);
	    object ID32_tree = default(object);
	    object char_literal34_tree = default(object);
	    object char_literal36_tree = default(object);
	    RewriteRuleITokenStream stream_INTERFACE=new RewriteRuleITokenStream(adaptor,"token INTERFACE");
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_47=new RewriteRuleITokenStream(adaptor,"token 47");
	    RewriteRuleITokenStream stream_48=new RewriteRuleITokenStream(adaptor,"token 48");
	    RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "entity_declaration");
		DebugLocation(62, 58);
		try
		{
			// .\\MessageContracts.g:63:2: (lc= INTERFACE ID block '{' ( declaration )* '}' -> ^( EntityDefinition[$lc,\"Block\"] ID block ( declaration )* ) )
			DebugEnterAlt(1);
			// .\\MessageContracts.g:63:4: lc= INTERFACE ID block '{' ( declaration )* '}'
			{
			DebugLocation(63, 6);
			lc=(IToken)Match(input,INTERFACE,Follow._INTERFACE_in_entity_declaration339);  
			stream_INTERFACE.Add(lc);

			DebugLocation(63, 18);
			ID32=(IToken)Match(input,ID,Follow._ID_in_entity_declaration341);  
			stream_ID.Add(ID32);

			DebugLocation(63, 21);
			PushFollow(Follow._block_in_entity_declaration343);
			block33=block();
			PopFollow();

			stream_block.Add(block33.Tree);
			DebugLocation(63, 27);
			char_literal34=(IToken)Match(input,47,Follow._47_in_entity_declaration345);  
			stream_47.Add(char_literal34);

			DebugLocation(63, 31);
			// .\\MessageContracts.g:63:31: ( declaration )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_1 = input.LA(1);

				if ((LA6_1==CONST||LA6_1==EXTERN||(LA6_1>=ID && LA6_1<=IF)||LA6_1==INTERFACE||LA6_1==NAMESPACE||LA6_1==USING))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// .\\MessageContracts.g:63:31: declaration
					{
					DebugLocation(63, 31);
					PushFollow(Follow._declaration_in_entity_declaration347);
					declaration35=declaration();
					PopFollow();

					stream_declaration.Add(declaration35.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(63, 44);
			char_literal36=(IToken)Match(input,48,Follow._48_in_entity_declaration350);  
			stream_48.Add(char_literal36);



			{
			// AST REWRITE
			// elements: ID, block, declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 64:2: -> ^( EntityDefinition[$lc,\"Block\"] ID block ( declaration )* )
			{
				DebugLocation(64, 5);
				// .\\MessageContracts.g:64:5: ^( EntityDefinition[$lc,\"Block\"] ID block ( declaration )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(64, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(EntityDefinition, lc, "Block"), root_1);

				DebugLocation(64, 37);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(64, 40);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(64, 46);
				// .\\MessageContracts.g:64:46: ( declaration )*
				while ( stream_declaration.HasNext )
				{
					DebugLocation(64, 46);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("entity_declaration", 7);
			LeaveRule("entity_declaration", 7);
			LeaveRule_entity_declaration();
	    }
	 	DebugLocation(64, 58);
		} finally { DebugExitRule(GrammarFileName, "entity_declaration"); }
		return retval;

	}
	// $ANTLR end "entity_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_type_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_type_declaration() {}
	// $ANTLR start "type_declaration"
	// .\\MessageContracts.g:66:1: type_declaration : ID ( Modifier )? block -> ^( TypeToken ID block ( Modifier )? ) ;
	[GrammarRule("type_declaration")]
	private AstParserRuleReturnScope<object, IToken> type_declaration()
	{
		EnterRule_type_declaration();
		EnterRule("type_declaration", 8);
		TraceIn("type_declaration", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ID37 = default(IToken);
	    IToken Modifier38 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> block39 = default(AstParserRuleReturnScope<object, IToken>);

	    object ID37_tree = default(object);
	    object Modifier38_tree = default(object);
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_Modifier=new RewriteRuleITokenStream(adaptor,"token Modifier");
	    RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "type_declaration");
		DebugLocation(66, 56);
		try
		{
			// .\\MessageContracts.g:67:2: ( ID ( Modifier )? block -> ^( TypeToken ID block ( Modifier )? ) )
			DebugEnterAlt(1);
			// .\\MessageContracts.g:67:4: ID ( Modifier )? block
			{
			DebugLocation(67, 4);
			ID37=(IToken)Match(input,ID,Follow._ID_in_type_declaration376);  
			stream_ID.Add(ID37);

			DebugLocation(67, 7);
			// .\\MessageContracts.g:67:7: ( Modifier )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
			int LA7_1 = input.LA(1);

			if ((LA7_1==Modifier))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\MessageContracts.g:67:7: Modifier
				{
				DebugLocation(67, 7);
				Modifier38=(IToken)Match(input,Modifier,Follow._Modifier_in_type_declaration378);  
				stream_Modifier.Add(Modifier38);


				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(67, 17);
			PushFollow(Follow._block_in_type_declaration381);
			block39=block();
			PopFollow();

			stream_block.Add(block39.Tree);


			{
			// AST REWRITE
			// elements: ID, block, Modifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 67:23: -> ^( TypeToken ID block ( Modifier )? )
			{
				DebugLocation(67, 26);
				// .\\MessageContracts.g:67:26: ^( TypeToken ID block ( Modifier )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(67, 28);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TypeToken, "TypeToken"), root_1);

				DebugLocation(67, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(67, 41);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(67, 47);
				// .\\MessageContracts.g:67:47: ( Modifier )?
				if (stream_Modifier.HasNext)
				{
					DebugLocation(67, 47);
					adaptor.AddChild(root_1, stream_Modifier.NextNode());

				}
				stream_Modifier.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_declaration", 8);
			LeaveRule("type_declaration", 8);
			LeaveRule_type_declaration();
	    }
	 	DebugLocation(67, 56);
		} finally { DebugExitRule(GrammarFileName, "type_declaration"); }
		return retval;

	}
	// $ANTLR end "type_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_member() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_member() {}
	// $ANTLR start "member"
	// .\\MessageContracts.g:69:1: member : ( ID ID -> ^( MemberToken ID ID ) | ID -> ^( FragmentReference ID ) );
	[GrammarRule("member")]
	private AstParserRuleReturnScope<object, IToken> member()
	{
		EnterRule_member();
		EnterRule("member", 9);
		TraceIn("member", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ID40 = default(IToken);
	    IToken ID41 = default(IToken);
	    IToken ID42 = default(IToken);

	    object ID40_tree = default(object);
	    object ID41_tree = default(object);
	    object ID42_tree = default(object);
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");

		try { DebugEnterRule(GrammarFileName, "member");
		DebugLocation(69, 1);
		try
		{
			// .\\MessageContracts.g:70:2: ( ID ID -> ^( MemberToken ID ID ) | ID -> ^( FragmentReference ID ) )
			int alt8=2;
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_1 = input.LA(1);

			if ((LA8_1==ID))
			{
				int LA8_2 = input.LA(2);

				if ((LA8_2==ID))
				{
					alt8 = 1;
				}
				else if (((LA8_2>=42 && LA8_2<=43)))
				{
					alt8 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\MessageContracts.g:70:4: ID ID
				{
				DebugLocation(70, 4);
				ID40=(IToken)Match(input,ID,Follow._ID_in_member406);  
				stream_ID.Add(ID40);

				DebugLocation(70, 7);
				ID41=(IToken)Match(input,ID,Follow._ID_in_member408);  
				stream_ID.Add(ID41);



				{
				// AST REWRITE
				// elements: ID, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 70:10: -> ^( MemberToken ID ID )
				{
					DebugLocation(70, 13);
					// .\\MessageContracts.g:70:13: ^( MemberToken ID ID )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(70, 15);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(MemberToken, "MemberToken"), root_1);

					DebugLocation(70, 27);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(70, 30);
					adaptor.AddChild(root_1, stream_ID.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// .\\MessageContracts.g:71:4: ID
				{
				DebugLocation(71, 4);
				ID42=(IToken)Match(input,ID,Follow._ID_in_member423);  
				stream_ID.Add(ID42);



				{
				// AST REWRITE
				// elements: ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 71:7: -> ^( FragmentReference ID )
				{
					DebugLocation(71, 10);
					// .\\MessageContracts.g:71:10: ^( FragmentReference ID )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(71, 12);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(FragmentReference, "FragmentReference"), root_1);

					DebugLocation(71, 30);
					adaptor.AddChild(root_1, stream_ID.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member", 9);
			LeaveRule("member", 9);
			LeaveRule_member();
	    }
	 	DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "member"); }
		return retval;

	}
	// $ANTLR end "member"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_block() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_block() {}
	// $ANTLR start "block"
	// .\\MessageContracts.g:75:1: block : lc= '(' ( member ( ',' member )* )? ')' ( representation )? ( comGuid )? ( comInterfaceGuid )? -> ^( BlockToken[$lc,\"Block\"] ( member )* ( representation )? ( comGuid )? ( comInterfaceGuid )? ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<object, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 10);
		TraceIn("block", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken lc = default(IToken);
	    IToken char_literal44 = default(IToken);
	    IToken char_literal46 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> member43 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> member45 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> representation47 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> comGuid48 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> comInterfaceGuid49 = default(AstParserRuleReturnScope<object, IToken>);

	    object lc_tree = default(object);
	    object char_literal44_tree = default(object);
	    object char_literal46_tree = default(object);
	    RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
	    RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
	    RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
	    RewriteRuleSubtreeStream stream_member=new RewriteRuleSubtreeStream(adaptor,"rule member");
	    RewriteRuleSubtreeStream stream_representation=new RewriteRuleSubtreeStream(adaptor,"rule representation");
	    RewriteRuleSubtreeStream stream_comGuid=new RewriteRuleSubtreeStream(adaptor,"rule comGuid");
	    RewriteRuleSubtreeStream stream_comInterfaceGuid=new RewriteRuleSubtreeStream(adaptor,"rule comInterfaceGuid");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(75, 4);
		try
		{
			// .\\MessageContracts.g:76:5: (lc= '(' ( member ( ',' member )* )? ')' ( representation )? ( comGuid )? ( comInterfaceGuid )? -> ^( BlockToken[$lc,\"Block\"] ( member )* ( representation )? ( comGuid )? ( comInterfaceGuid )? ) )
			DebugEnterAlt(1);
			// .\\MessageContracts.g:76:9: lc= '(' ( member ( ',' member )* )? ')' ( representation )? ( comGuid )? ( comInterfaceGuid )?
			{
			DebugLocation(76, 11);
			lc=(IToken)Match(input,41,Follow._41_in_block451);  
			stream_41.Add(lc);

			DebugLocation(77, 13);
			// .\\MessageContracts.g:77:13: ( member ( ',' member )* )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_1 = input.LA(1);

			if ((LA10_1==ID))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\MessageContracts.g:77:14: member ( ',' member )*
				{
				DebugLocation(77, 14);
				PushFollow(Follow._member_in_block466);
				member43=member();
				PopFollow();

				stream_member.Add(member43.Tree);
				DebugLocation(77, 21);
				// .\\MessageContracts.g:77:21: ( ',' member )*
				try { DebugEnterSubRule(9);
				while (true)
				{
					int alt9=2;
					try { DebugEnterDecision(9, decisionCanBacktrack[9]);
					int LA9_1 = input.LA(1);

					if ((LA9_1==43))
					{
						alt9 = 1;
					}


					} finally { DebugExitDecision(9); }
					switch ( alt9 )
					{
					case 1:
						DebugEnterAlt(1);
						// .\\MessageContracts.g:77:22: ',' member
						{
						DebugLocation(77, 22);
						char_literal44=(IToken)Match(input,43,Follow._43_in_block469);  
						stream_43.Add(char_literal44);

						DebugLocation(77, 26);
						PushFollow(Follow._member_in_block471);
						member45=member();
						PopFollow();

						stream_member.Add(member45.Tree);

						}
						break;

					default:
						goto loop9;
					}
				}

				loop9:
					;

				} finally { DebugExitSubRule(9); }


				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(78, 9);
			char_literal46=(IToken)Match(input,42,Follow._42_in_block485);  
			stream_42.Add(char_literal46);

			DebugLocation(78, 13);
			// .\\MessageContracts.g:78:13: ( representation )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_1 = input.LA(1);

			if ((LA11_1==EXPLICIT))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\MessageContracts.g:78:13: representation
				{
				DebugLocation(78, 13);
				PushFollow(Follow._representation_in_block487);
				representation47=representation();
				PopFollow();

				stream_representation.Add(representation47.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(78, 29);
			// .\\MessageContracts.g:78:29: ( comGuid )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_1 = input.LA(1);

			if ((LA12_1==CLASS))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\MessageContracts.g:78:29: comGuid
				{
				DebugLocation(78, 29);
				PushFollow(Follow._comGuid_in_block490);
				comGuid48=comGuid();
				PopFollow();

				stream_comGuid.Add(comGuid48.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(78, 38);
			// .\\MessageContracts.g:78:38: ( comInterfaceGuid )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_1 = input.LA(1);

			if ((LA13_1==ALIAS))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// .\\MessageContracts.g:78:38: comInterfaceGuid
				{
				DebugLocation(78, 38);
				PushFollow(Follow._comInterfaceGuid_in_block493);
				comInterfaceGuid49=comInterfaceGuid();
				PopFollow();

				stream_comInterfaceGuid.Add(comInterfaceGuid49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: member, representation, comGuid, comInterfaceGuid
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 79:9: -> ^( BlockToken[$lc,\"Block\"] ( member )* ( representation )? ( comGuid )? ( comInterfaceGuid )? )
			{
				DebugLocation(79, 12);
				// .\\MessageContracts.g:79:12: ^( BlockToken[$lc,\"Block\"] ( member )* ( representation )? ( comGuid )? ( comInterfaceGuid )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(79, 14);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(BlockToken, lc, "Block"), root_1);

				DebugLocation(79, 38);
				// .\\MessageContracts.g:79:38: ( member )*
				while ( stream_member.HasNext )
				{
					DebugLocation(79, 38);
					adaptor.AddChild(root_1, stream_member.NextTree());

				}
				stream_member.Reset();
				DebugLocation(79, 46);
				// .\\MessageContracts.g:79:46: ( representation )?
				if (stream_representation.HasNext)
				{
					DebugLocation(79, 46);
					adaptor.AddChild(root_1, stream_representation.NextTree());

				}
				stream_representation.Reset();
				DebugLocation(79, 62);
				// .\\MessageContracts.g:79:62: ( comGuid )?
				if (stream_comGuid.HasNext)
				{
					DebugLocation(79, 62);
					adaptor.AddChild(root_1, stream_comGuid.NextTree());

				}
				stream_comGuid.Reset();
				DebugLocation(79, 71);
				// .\\MessageContracts.g:79:71: ( comInterfaceGuid )?
				if (stream_comInterfaceGuid.HasNext)
				{
					DebugLocation(79, 71);
					adaptor.AddChild(root_1, stream_comInterfaceGuid.NextTree());

				}
				stream_comInterfaceGuid.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 10);
			LeaveRule("block", 10);
			LeaveRule_block();
	    }
	 	DebugLocation(80, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_representation() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_representation() {}
	// $ANTLR start "representation"
	// .\\MessageContracts.g:82:1: representation : EXPLICIT STRING -> ^( StringRepresentationToken STRING ) ;
	[GrammarRule("representation")]
	private AstParserRuleReturnScope<object, IToken> representation()
	{
		EnterRule_representation();
		EnterRule("representation", 11);
		TraceIn("representation", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken EXPLICIT50 = default(IToken);
	    IToken STRING51 = default(IToken);

	    object EXPLICIT50_tree = default(object);
	    object STRING51_tree = default(object);
	    RewriteRuleITokenStream stream_EXPLICIT=new RewriteRuleITokenStream(adaptor,"token EXPLICIT");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "representation");
		DebugLocation(82, 57);
		try
		{
			// .\\MessageContracts.g:83:2: ( EXPLICIT STRING -> ^( StringRepresentationToken STRING ) )
			DebugEnterAlt(1);
			// .\\MessageContracts.g:83:4: EXPLICIT STRING
			{
			DebugLocation(83, 4);
			EXPLICIT50=(IToken)Match(input,EXPLICIT,Follow._EXPLICIT_in_representation543);  
			stream_EXPLICIT.Add(EXPLICIT50);

			DebugLocation(83, 13);
			STRING51=(IToken)Match(input,STRING,Follow._STRING_in_representation545);  
			stream_STRING.Add(STRING51);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 83:20: -> ^( StringRepresentationToken STRING )
			{
				DebugLocation(83, 23);
				// .\\MessageContracts.g:83:23: ^( StringRepresentationToken STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(83, 25);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(StringRepresentationToken, "StringRepresentationToken"), root_1);

				DebugLocation(83, 51);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("representation", 11);
			LeaveRule("representation", 11);
			LeaveRule_representation();
	    }
	 	DebugLocation(83, 57);
		} finally { DebugExitRule(GrammarFileName, "representation"); }
		return retval;

	}
	// $ANTLR end "representation"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_extern_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_extern_declaration() {}
	// $ANTLR start "extern_declaration"
	// .\\MessageContracts.g:85:1: extern_declaration : EXTERN STRING ';' -> ^( ExternToken STRING ) ;
	[GrammarRule("extern_declaration")]
	private AstParserRuleReturnScope<object, IToken> extern_declaration()
	{
		EnterRule_extern_declaration();
		EnterRule("extern_declaration", 12);
		TraceIn("extern_declaration", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken EXTERN52 = default(IToken);
	    IToken STRING53 = default(IToken);
	    IToken char_literal54 = default(IToken);

	    object EXTERN52_tree = default(object);
	    object STRING53_tree = default(object);
	    object char_literal54_tree = default(object);
	    RewriteRuleITokenStream stream_EXTERN=new RewriteRuleITokenStream(adaptor,"token EXTERN");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_45=new RewriteRuleITokenStream(adaptor,"token 45");

		try { DebugEnterRule(GrammarFileName, "extern_declaration");
		DebugLocation(85, 50);
		try
		{
			// .\\MessageContracts.g:86:5: ( EXTERN STRING ';' -> ^( ExternToken STRING ) )
			DebugEnterAlt(1);
			// .\\MessageContracts.g:86:9: EXTERN STRING ';'
			{
			DebugLocation(86, 9);
			EXTERN52=(IToken)Match(input,EXTERN,Follow._EXTERN_in_extern_declaration568);  
			stream_EXTERN.Add(EXTERN52);

			DebugLocation(86, 16);
			STRING53=(IToken)Match(input,STRING,Follow._STRING_in_extern_declaration570);  
			stream_STRING.Add(STRING53);

			DebugLocation(86, 23);
			char_literal54=(IToken)Match(input,45,Follow._45_in_extern_declaration572);  
			stream_45.Add(char_literal54);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 86:27: -> ^( ExternToken STRING )
			{
				DebugLocation(86, 30);
				// .\\MessageContracts.g:86:30: ^( ExternToken STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(86, 32);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ExternToken, "ExternToken"), root_1);

				DebugLocation(86, 44);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("extern_declaration", 12);
			LeaveRule("extern_declaration", 12);
			LeaveRule_extern_declaration();
	    }
	 	DebugLocation(86, 50);
		} finally { DebugExitRule(GrammarFileName, "extern_declaration"); }
		return retval;

	}
	// $ANTLR end "extern_declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_comGuid() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_comGuid() {}
	// $ANTLR start "comGuid"
	// .\\MessageContracts.g:88:1: comGuid : CLASS GUID -> ^( ComGuidToken GUID ) ;
	[GrammarRule("comGuid")]
	private AstParserRuleReturnScope<object, IToken> comGuid()
	{
		EnterRule_comGuid();
		EnterRule("comGuid", 13);
		TraceIn("comGuid", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CLASS55 = default(IToken);
	    IToken GUID56 = default(IToken);

	    object CLASS55_tree = default(object);
	    object GUID56_tree = default(object);
	    RewriteRuleITokenStream stream_CLASS=new RewriteRuleITokenStream(adaptor,"token CLASS");
	    RewriteRuleITokenStream stream_GUID=new RewriteRuleITokenStream(adaptor,"token GUID");

		try { DebugEnterRule(GrammarFileName, "comGuid");
		DebugLocation(88, 37);
		try
		{
			// .\\MessageContracts.g:89:2: ( CLASS GUID -> ^( ComGuidToken GUID ) )
			DebugEnterAlt(1);
			// .\\MessageContracts.g:89:4: CLASS GUID
			{
			DebugLocation(89, 4);
			CLASS55=(IToken)Match(input,CLASS,Follow._CLASS_in_comGuid592);  
			stream_CLASS.Add(CLASS55);

			DebugLocation(89, 10);
			GUID56=(IToken)Match(input,GUID,Follow._GUID_in_comGuid594);  
			stream_GUID.Add(GUID56);



			{
			// AST REWRITE
			// elements: GUID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 89:15: -> ^( ComGuidToken GUID )
			{
				DebugLocation(89, 18);
				// .\\MessageContracts.g:89:18: ^( ComGuidToken GUID )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(89, 20);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ComGuidToken, "ComGuidToken"), root_1);

				DebugLocation(89, 33);
				adaptor.AddChild(root_1, stream_GUID.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comGuid", 13);
			LeaveRule("comGuid", 13);
			LeaveRule_comGuid();
	    }
	 	DebugLocation(89, 37);
		} finally { DebugExitRule(GrammarFileName, "comGuid"); }
		return retval;

	}
	// $ANTLR end "comGuid"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_comInterfaceGuid() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_comInterfaceGuid() {}
	// $ANTLR start "comInterfaceGuid"
	// .\\MessageContracts.g:91:1: comInterfaceGuid : ALIAS GUID -> ^( ComInterfaceGuidToken GUID ) ;
	[GrammarRule("comInterfaceGuid")]
	private AstParserRuleReturnScope<object, IToken> comInterfaceGuid()
	{
		EnterRule_comInterfaceGuid();
		EnterRule("comInterfaceGuid", 14);
		TraceIn("comInterfaceGuid", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ALIAS57 = default(IToken);
	    IToken GUID58 = default(IToken);

	    object ALIAS57_tree = default(object);
	    object GUID58_tree = default(object);
	    RewriteRuleITokenStream stream_ALIAS=new RewriteRuleITokenStream(adaptor,"token ALIAS");
	    RewriteRuleITokenStream stream_GUID=new RewriteRuleITokenStream(adaptor,"token GUID");

		try { DebugEnterRule(GrammarFileName, "comInterfaceGuid");
		DebugLocation(91, 46);
		try
		{
			// .\\MessageContracts.g:92:2: ( ALIAS GUID -> ^( ComInterfaceGuidToken GUID ) )
			DebugEnterAlt(1);
			// .\\MessageContracts.g:92:4: ALIAS GUID
			{
			DebugLocation(92, 4);
			ALIAS57=(IToken)Match(input,ALIAS,Follow._ALIAS_in_comInterfaceGuid611);  
			stream_ALIAS.Add(ALIAS57);

			DebugLocation(92, 10);
			GUID58=(IToken)Match(input,GUID,Follow._GUID_in_comInterfaceGuid613);  
			stream_GUID.Add(GUID58);



			{
			// AST REWRITE
			// elements: GUID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 92:15: -> ^( ComInterfaceGuidToken GUID )
			{
				DebugLocation(92, 18);
				// .\\MessageContracts.g:92:18: ^( ComInterfaceGuidToken GUID )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(92, 20);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ComInterfaceGuidToken, "ComInterfaceGuidToken"), root_1);

				DebugLocation(92, 42);
				adaptor.AddChild(root_1, stream_GUID.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comInterfaceGuid", 14);
			LeaveRule("comInterfaceGuid", 14);
			LeaveRule_comInterfaceGuid();
	    }
	 	DebugLocation(92, 46);
		} finally { DebugExitRule(GrammarFileName, "comInterfaceGuid"); }
		return retval;

	}
	// $ANTLR end "comInterfaceGuid"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _declaration_in_program125 = new BitSet(new ulong[]{0x408B008102UL});
		public static readonly BitSet _modifier_declaration_in_declaration138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _frag_declaration_in_declaration143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_declaration_in_declaration148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _entity_declaration_in_declaration153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_declaration_in_declaration158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _extern_declaration_in_declaration164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _using_declaration_in_declaration169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAMESPACE_in_namespace_declaration183 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ID_in_namespace_declaration186 = new BitSet(new ulong[]{0x300000000000UL});
		public static readonly BitSet _44_in_namespace_declaration189 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ID_in_namespace_declaration191 = new BitSet(new ulong[]{0x300000000000UL});
		public static readonly BitSet _45_in_namespace_declaration196 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USING_in_using_declaration226 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ID_in_using_declaration229 = new BitSet(new ulong[]{0x300000000000UL});
		public static readonly BitSet _44_in_using_declaration232 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ID_in_using_declaration234 = new BitSet(new ulong[]{0x300000000000UL});
		public static readonly BitSet _45_in_using_declaration239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONST_in_frag_declaration263 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ID_in_frag_declaration265 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_frag_declaration267 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ID_in_frag_declaration269 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ID_in_frag_declaration271 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _45_in_frag_declaration273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_modifier_declaration300 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _Modifier_in_modifier_declaration302 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_modifier_declaration304 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ID_in_modifier_declaration306 = new BitSet(new ulong[]{0x280000000000UL});
		public static readonly BitSet _43_in_modifier_declaration309 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ID_in_modifier_declaration311 = new BitSet(new ulong[]{0x280000000000UL});
		public static readonly BitSet _45_in_modifier_declaration315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTERFACE_in_entity_declaration339 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ID_in_entity_declaration341 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _block_in_entity_declaration343 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_entity_declaration345 = new BitSet(new ulong[]{0x100408B008100UL});
		public static readonly BitSet _declaration_in_entity_declaration347 = new BitSet(new ulong[]{0x100408B008100UL});
		public static readonly BitSet _48_in_entity_declaration350 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_type_declaration376 = new BitSet(new ulong[]{0x20020000000UL});
		public static readonly BitSet _Modifier_in_type_declaration378 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _block_in_type_declaration381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_member406 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ID_in_member408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_member423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _41_in_block451 = new BitSet(new ulong[]{0x40001000000UL});
		public static readonly BitSet _member_in_block466 = new BitSet(new ulong[]{0xC0000000000UL});
		public static readonly BitSet _43_in_block469 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _member_in_block471 = new BitSet(new ulong[]{0xC0000000000UL});
		public static readonly BitSet _42_in_block485 = new BitSet(new ulong[]{0x4052UL});
		public static readonly BitSet _representation_in_block487 = new BitSet(new ulong[]{0x52UL});
		public static readonly BitSet _comGuid_in_block490 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _comInterfaceGuid_in_block493 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPLICIT_in_representation543 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _STRING_in_representation545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXTERN_in_extern_declaration568 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _STRING_in_extern_declaration570 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _45_in_extern_declaration572 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CLASS_in_comGuid592 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _GUID_in_comGuid594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALIAS_in_comInterfaceGuid611 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _GUID_in_comInterfaceGuid613 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  MessageContracts 
